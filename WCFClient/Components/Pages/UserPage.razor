@page "/users"
@using System.ComponentModel.DataAnnotations
@using GarageServiceProxy
@inject GarageServiceClient Client
@rendermode InteractiveServer

<PageTitle>User Management</PageTitle>

@if (!isLoggedIn)
{
    <h3>Sign In to Manage Users</h3>
    <EditForm Model="loginModel" OnValidSubmit="HandleLoginAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
        </div>

        <div class="mb-3">
            <label for="groupnumber" class="form-label">Group Number</label>
            <InputNumber id="groupnumber" class="form-control" @bind-Value="loginModel.groupnumber" />
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        </div>

        <button type="submit" class="btn btn-primary" disabled="@(isProcessingLogin)">@(isProcessingLogin ? "Signing in..." : "Sign In")</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(loginMessage))
    {
        <div class="mt-3 alert @loginAlertClass">@loginMessage</div>
    }
}
else
{
    <h3>User Management</h3>
    <div class="row">
        <div class="col-3">
            <ul class="nav flex-column nav-pills">
                <li class="nav-item mb-1">
                    <button type="button" class="nav-link w-100 @(selectedOperation == Operation.List ? "active" : "")" @onclick="() => SelectOperation(Operation.List)">List Users</button>
                </li>
                <li class="nav-item mb-1">
                    <button type="button" class="nav-link w-100 @(selectedOperation == Operation.GetById ? "active" : "")" @onclick="() => SelectOperation(Operation.GetById)">Get User by ID</button>
                </li>
            </ul>
        </div>
        <div class="col-9">
            @RenderOperation()
        </div>
    </div>
}

@code {
    // Login state
    class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required"), Range(0, 100000)]
        public int groupnumber { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }

    private LoginModel loginModel = new();
    private bool isProcessingLogin;
    private bool isLoggedIn;
    private string loginMessage;
    private string loginAlertClass;

    private async Task HandleLoginAsync()
    {
        isProcessingLogin = true;
        loginMessage = string.Empty;
        try
        {
            bool success = await Client.LoginAsync(
            loginModel.Username,
            loginModel.groupnumber,
            loginModel.Password);
            if (success)
            {
                isLoggedIn = true;
            }
            else
            {
                loginMessage = "Invalid credentials.";
                loginAlertClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            loginMessage = $"Error during login: {ex.Message}";
            loginAlertClass = "alert-warning";
        }
        finally
        {
            isProcessingLogin = false;
        }
    }

    // User management
    enum Operation { List, GetById }
    private Operation selectedOperation = Operation.List;

    private List<User> users = new();
    private User currentUser = new();
    private int searchId;
    private string message;
    private bool isLoading;
    private bool initialLoadRequested;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !initialLoadRequested)
        {
            initialLoadRequested = true;
            await Task.Delay(10);
            await LoadAllAsync();
            StateHasChanged();
        }
    }

    private async Task LoadAllAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            users = (await Client.GetAllUsersAsync())?.ToList() ?? new List<User>();
        }
        catch (Exception ex)
        {
            message = $"Error loading users: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SelectOperation(Operation op)
    {
        selectedOperation = op;
        message = string.Empty;
        currentUser = new User();
        searchId = 0;

        if (op == Operation.List)
        {
            _ = LoadAllAsync();
        }
    }

    private RenderFragment RenderOperation() => selectedOperation switch
    {
        Operation.List => @<div>
        <h4>All Users</h4>
        @if (isLoading)
    {
        <p>Loading users...</p>
    }
    else
    {
        @if (!string.IsNullOrEmpty(message)) {
        <div class="alert alert-danger">@message</div>
 }
        <table class="table table-striped">
            <thead>
                <tr><th>ID</th><th>Username</th><th>GroupNumber</th></tr>
            </thead>
            <tbody>
                @foreach (var u in users)
            {
                <tr>
                    <td>@u.ID</td>
                    <td>@u.Username</td>
                    <td>@u.GroupNumber</td>
                </tr>
            }
            </tbody>
        </table>
    }
    </div>,

        Operation.GetById => @<div>
        <h4>Find User by ID</h4>
        <div class="input-group mb-2" style="max-width: 300px;">
            <InputNumber @bind-Value="searchId" class="form-control" placeholder="ID" />
            <button class="btn btn-primary" @onclick="LoadUserByIdAsync">Search</button>
        </div>
        @if (currentUser?.ID > 0)
    {
        <div>
            <p><strong>ID:</strong> @currentUser.ID</p>
            <p><strong>Username:</strong> @currentUser.Username</p>
            <p><strong>GroupNumber:</strong> @currentUser.GroupNumber</p>
        </div>
    }
        @if (!string.IsNullOrEmpty(message)) {
        <div class="alert alert-danger">@message</div>
 }
    </div>,

        _ => @<div>Select an operation.</div>
    };

    private async Task LoadUserByIdAsync()
    {
        try
        {
            message = string.Empty;
            var user = await Client.GetUserByIDAsync(searchId);
            if (user == null)
            {
                message = "User not found";
                currentUser = new User();
            }
            else
            {
                currentUser = user;
            }
        }
        catch
        {
            message = "User not found";
            currentUser = new User();
        }
    }
}
